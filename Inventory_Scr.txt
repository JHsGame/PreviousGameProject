using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Inventory_Scr : MonoBehaviour
{
    private static Inventory_Scr Instance;

    // csv
    public List<Dictionary<string, object>> bagData;

    private List<ItemSlot_Scr> slots = new List<ItemSlot_Scr>();   // 아이템 슬롯 리스트 (히어로 포함)
    private List<ItemSlot_Scr> combinationSlots = new List<ItemSlot_Scr>();
    private List<ItemSlot_Scr> sellSlots = new List<ItemSlot_Scr>();

    [SerializeField]
    private bool b_isFull;              // 현재 인벤토리에 아이템이 꽉 차있어 더 이상 아이템을 획득할 수 없게 체크해주는 변수.
    [SerializeField]
    private bool b_isCombinationFull;   // 조합에 필요한 아이템이 꽉 차있을 때 조합버튼이 활성화 되도록 만들어주는 변수.

    private int i_SellMoney = 0;
    private int i_inventoryLevel = 1;
    private int i_InventorySize = 20;
    private int i_inventoryPrice = 0;
    [SerializeField]
    private int i_combinationLevel;
    private int i_combinationAmount;
    private int i_randCombinationNum;

    // 얘도 Item에 들어가는 스텟 추가 정보를 똑같이 가져와서 적어주자.
    [SerializeField]
    private float f_HP;
    [SerializeField]
    private float f_Heal;
    [SerializeField]
    private float f_Attack;
    [SerializeField]
    private float f_Speed;
    [SerializeField]
    private float f_Ability;
    [SerializeField]
    private float f_Critical;

    // 추가되는 스텟 정보를 공이나 캐릭터 등등에 부여해주자.
    public static Inventory_Scr instance { get => Instance; }
    public bool InventoryFull { get => b_isFull; }
    public bool CombinationFull { get => b_isCombinationFull; }
    public int InventoryLevel { get => i_inventoryLevel; set => i_inventoryLevel = value; }
    public int InventoryPrice { get => i_inventoryPrice; }
    public int CombinationLevel { get => i_combinationLevel; }
    public float AddHP { get => f_HP; }
    public float AddHeal{ get => f_Heal; }
    public float AddAttack { get => f_Attack; }
    public float AddBallSpeed { get => f_Speed; }
    public float AddAbility { get => f_Ability; }
    public float AddCritical { get => f_Critical; }
    public List<ItemSlot_Scr> myItems { get => slots; }

    void Start()
    {
        if (Instance != null)
        {
            return;
        }
        else
        {
            Instance = this;

            Transform parent = InventoryCashing_Scr.instance.slotParent;

            for (int i = 0; i < parent.childCount; ++i)
            {
                slots.Add(parent.GetChild(i).GetComponent<ItemSlot_Scr>());
            }
        }
    }

    public void ClearList()
    {
        for (int i = 0; i < slots.Count; ++i)
        {
            slots[i].SelectedOff();
        }

        combinationSlots.Clear();
        sellSlots.Clear();

        InventoryCashing_Scr.instance.CombinationMode = false;
        InventoryCashing_Scr.instance.SellMode = false;
    }

    public void readytoDelay()
    {
        Invoke("StartingCoroutine", 1f);
    }

    public void StartingCoroutine()
    {
        StartCoroutine(InventoryChecker());
        StartCoroutine(InventoryReSize());
    }

    // 인벤토리에 있는 아이템에 따른 추가 능력치 계산 함수.
    IEnumerator InventoryChecker()
    {
        while (true)
        {
            f_HP = f_Heal = f_Attack = f_Speed = f_Ability = f_Critical = 0f;

            if (!Button_Option.instance.G_Inventory.activeSelf)
            {
                foreach (ItemSlot_Scr slot in slots)
                {
                    if (slot.isItem && slot.gameObject.activeSelf && slot.item != null)
                    {
                        Item item = slot.item;
                        AddItemAbility(item.sort, slot.itemValue);   // 만일 추가되는 능력치가 2가지 이상이라면 수정할 필요가 있음.
                    }
                }
            }

            if (b_isCombinationFull || InventoryCashing_Scr.instance.SellMode)
            {
                InventoryCashing_Scr.instance.DecideButton.GetComponent<Image>().color = new Color(255f / 255f, 255f / 255f, 0f / 255f, 2555f / 255f);
                InventoryCashing_Scr.instance.DecideButton.GetComponent<Button>().enabled = true;
            }
            else
            {
                InventoryCashing_Scr.instance.DecideButton.GetComponent<Image>().color = new Color(255f / 255f, 255f / 255f, 0f / 255f, 125f / 255f);
                InventoryCashing_Scr.instance.DecideButton.GetComponent<Button>().enabled = false;
            }

            for(int i = 0; i < i_InventorySize; ++i)
            {
                b_isFull = false;
                if(slots[i].item != null)
                {
                    b_isFull = true;
                }
            }

            yield return CoroutineManager_Scr.WaitForEndOfFrame;
        }
    }

    // 가방 크기에 따라 슬롯을 활성화시키기.
    IEnumerator InventoryReSize()
    {
        // 최초 실행 시 레벨에 따른 설정 값을 가져오기.
        InitInventory();

        while (true)
        {
            if (slots.Count > 0)
            {
                foreach (ItemSlot_Scr slot in slots)
                {
                    if (slot.slotNum <= i_InventorySize)
                    {
                        slot.gameObject.SetActive(true);
                    }
                    else
                    {
                        slot.gameObject.SetActive(false);
                    }
                }
            }
            yield return CoroutineManager_Scr.WaitForEndOfFrame;
        }
    }

    public void InitInventory()
    {
        if (bagData != null)
        {
            InventoryCashing_Scr.instance.invenUI.GetComponent<Image>().sprite = InventoryCashing_Scr.instance.bagIcons[i_inventoryLevel - 1];
            i_InventorySize = (int)(Bag_Hero_ItmeCSV.instance.BagData[i_inventoryLevel - 1]["capacity"]);
            i_inventoryPrice = (int)(Bag_Hero_ItmeCSV.instance.BagData[i_inventoryLevel]["Price"]);
            TranslateManager_Scr.instance.InventoryTranslate();
        }
    }

    public void LoadItem(int invenNum, int itemNum)
    {
        slots[invenNum].LoadInfo(itemNum, true);
    }

    public void LoadHero(int invenNum, int itemNum)
    {
        // 여기에 영웅 정보 받아오기
        slots[invenNum].LoadInfo(itemNum, false);
    }

    public void GetItem(int start, int end)
    {
        for (int i = 0; i < slots.Count; ++i)
        {
            if (slots[i].item == null)
            {
                int tmp = Random.Range(start, end);
                slots[i].LoadInfo(tmp, true);
                break;
            }
        }
    }

    public void GetHero()
    {
        for (int i = 0; i < slots.Count; ++i)
        {
            if (slots[i].item == null)
            {
                int tmp = Random.Range(0, 2);
                slots[i].LoadInfo(tmp, false);
                break;
            }
        }
    }

    // 추가 능력치 계산.
    public void AddItemAbility(List<string> str, List<float> values)
    {
        for (int i = 0; i < str.Count; ++i)
        {
            switch (str[i])
            {
                case "HP":
                    f_HP += values[i];
                    break;
                case "Heal":
                    f_Heal += values[i];
                    break;
                case "Attack":
                    f_Attack += values[i];
                    break;
                case "Speed":
                    f_Speed += values[i];
                    break;
                case "Ability":
                    f_Ability += values[i];
                    break;
                case "Critical":
                    f_Critical += values[i];
                    break;
                default:
                    break;
            }
        }
    }

    public void SetCombinationSlot(int _level, ItemSlot_Scr _slot)
    {
        // 아이템 판매모드에서 모든 아이템이 선택 가능했다면, 조합 모드에서는 최초 선택한 아이템을 기준으로 해당 아이템과 같은 티어만 선택이 되도록 설정해야한다.
        // 조합은 엑셀 받은거를 통하여 수정하기. 티어별 조합에 들어가는 아이템 개수가 다름. 다른 아이템들은 선택을 못하도록 설정.
        if (combinationSlots.Count == 0)
        {
            i_combinationLevel = _level;
            i_combinationAmount = (int)Bag_Hero_ItmeCSV.instance.PackageData[i_combinationLevel - 1]["Fusion"];

            foreach (ItemSlot_Scr slot in slots)
            {
                if (slot.item != null && slot.item.Level != i_combinationLevel)
                {
                    // 선택을 못하도록 패널 꺼버리기(아이템 이미지 알파값 조절 및 선택 못하도록 설정)
                    slot.impossibleSelect();
                    
                }
            }
        }

        if (combinationSlots.Count != i_combinationAmount && i_combinationLevel == _level)
        {
            combinationSlots.Add(_slot);

            if(combinationSlots.Count == i_combinationAmount)
            {
                // 꽉 찼으니 조합버튼을 활성화
                b_isCombinationFull = true;
            }    
        }
        else
        {
            // 선택 취소
            _slot.SelectedOff();
        }
    }

    // 조합모드에서 아이템을 선택 취소하는 함수.
    public void RejectCombination(ItemSlot_Scr _slot)
    {
        _slot.CheckImageOff();
        combinationSlots.Remove(_slot);

        b_isCombinationFull = false;
        // 조합모드에서 선택한 아이템이 0이 된 경우로, 모든 아이템을 선택할 수 있도록 수정해야한다.
        if (combinationSlots.Count == 0)
        {
            foreach (ItemSlot_Scr slot in slots)
            {
                if (slot.item != null)
                {
                    // 모든 아이템의 알파값을 밝게 조절
                    slot.SelectedOff();
                }
            }
        }
    }

    public void SetSellSlot(ItemSlot_Scr _slot)
    {
        sellSlots.Add(_slot);
    }

    public void RejectSell(ItemSlot_Scr _slot)
    {
        _slot.CheckImageOff();
        sellSlots.Remove(_slot);
    }


    // 아이템 조합
    // 조합모드를 선택한 후 최초 선택한 아이템 레벨과 동일한 레벨의 아이템만 선택 가능하도록 설정을 합시다.
    public void ItemCombination()
    {
        // 각 티어별 아이템 조합 개수가 다르기 때문에 해당 개수를 채웠을 때에만 조합을 가능하도록 or 조합 버튼을 클릭할 수 있도록.
        for(int i = 0; i < combinationSlots.Count; ++i)
        {
            combinationSlots[i].ResetSlot();
        }
        i_combinationLevel++;

        for (int i = 0; i < slots.Count; ++i)
        {
            if(slots[i].item == null)
            {
                // 다음 티어 아이템을 넣기
                // 조합 티어에 따른 아이템 번호 가져오기
                // 각 티어별 획득 가능한 아이템 번호를 랜덤으로 가져오기
                switch (i_combinationLevel)
                {
                    case 1:
                        i_randCombinationNum = Random.Range(0, 6);
                        break;
                    case 2:
                        i_randCombinationNum = Random.Range(6, 21);
                        break;
                    case 3:
                        i_randCombinationNum = Random.Range(21, 40);
                        break;
                    case 4:
                        i_randCombinationNum = Random.Range(40, 46);
                        break;
                    case 5:
                        i_randCombinationNum = Random.Range(46, 50);
                        break;
                    case 6:
                        i_randCombinationNum = 51;
                        break;
                    default:
                        break;
                }
                print(i_randCombinationNum);
                slots[i].LoadInfo(i_randCombinationNum, true);
                break;
            }
            b_isCombinationFull = false;
            ClearList();

            Save_Load.instance.Save();
        }
    }

    // 히어로 조합
    public void HeroCombination()
    {
        for (int i = 0; i < combinationSlots.Count; ++i)
        {
            combinationSlots[i].ResetSlot();
        }
        i_combinationLevel++;

        for (int i = 0; i < slots.Count; ++i)
        {
            if (slots[i].item == null)
            {
                switch (i_combinationLevel)
                {
                    case 1:
                        i_randCombinationNum = Random.Range(0, 2);
                        break;
                    case 2:
                        i_randCombinationNum = Random.Range(2, 6);
                        break;
                    case 3:
                        i_randCombinationNum = Random.Range(6, 12);
                        break;
                    case 4:
                        i_randCombinationNum = Random.Range(12, 18);
                        break;
                    case 5:
                        i_randCombinationNum = Random.Range(18, 21);
                        break;
                    case 6:
                        i_randCombinationNum = 21;
                        break;
                    default:
                        break;
                }
                print(i_randCombinationNum);
                slots[i].LoadInfo(i_randCombinationNum, false);
                break;
            }
            b_isCombinationFull = false;
            ClearList();

            Save_Load.instance.Save();
        }
    }
    public void SellSlots()
    {
        for (int i = 0; i < sellSlots.Count; ++i)
        {
            switch (sellSlots[i].itemLevel)
            {
                case 1:
                    i_SellMoney += 100;
                    break;
                case 2:
                    i_SellMoney += 200;
                    break;
                case 3:
                    i_SellMoney += 300;
                    break;
                case 4:
                    i_SellMoney += 400;
                    break;
                case 5:
                    i_SellMoney += 500;
                    break;
                case 6:
                    i_SellMoney += 600;
                    break;
                default:
                    break;
            }
            sellSlots[i].ResetSlot();
        }
        // 아마 보석으로 샀으니 보석에 더해주면 되지 않을까?
        GoldManager_Scr.instance.i_Gem += i_SellMoney;
        i_SellMoney = 0;

        ClearList();

        Save_Load.instance.Save();
    }
}