using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class ItemSlot_Scr : MonoBehaviour
{
    ItemSlotButton_Scr buttonScr;
    ItemSlotCaching_Scr cashingScr;

    private Item myItem;

    [SerializeField]
    private bool b_isSelected;
    private bool b_isItem;
    private int i_slotNum;
    private int i_csvNum;
    private List<float> f_Value = new List<float>();

    public Item item { get => myItem; }
    public bool isSelected { get => b_isSelected; set => b_isSelected = value; }
    public bool isItem { get => b_isItem; set => b_isItem = value; }
    public int slotNum { get => i_slotNum; }
    public int itemLevel { get => myItem.Level; }
    public int csvNum { get => i_csvNum; }
    public List<float> itemValue { get => f_Value; }

    private void Start()
    {
        Invoke("Init", 3f);
    }

    public void Init()
    {
        buttonScr = this.GetComponent<ItemSlotButton_Scr>();
        cashingScr = this.GetComponent<ItemSlotCaching_Scr>();

        buttonScr.SetScript(this, cashingScr);
        cashingScr.SetScript(this, buttonScr);
        i_slotNum = transform.GetSiblingIndex() + 1;    // 각 슬롯 번호는 1번부터
    }

    // 조합 모드에서 선택 가능한 슬롯들을 활성화 시켜주는 작업
    // 판매 모드에서는 모든 슬롯들이 선택 가능.
    // 선택되어있는 슬롯들은 체크이미지를 활성화 시켜줍시다.

    public void CheckImageOn()
    {
        cashingScr.itemImage.color = new Color(255f / 255f, 255f / 255f, 255f / 255f, 125f / 255f);
        cashingScr.CheckImage.gameObject.SetActive(true);
    }

    public void CheckImageOff()
    {
        cashingScr.itemImage.color = new Color(255f / 255f, 255f / 255f, 255f / 255f, 255f / 255f);
        cashingScr.CheckImage.gameObject.SetActive(false);
    }

    public void impossibleSelect()
    {
        b_isSelected = false;
        CheckImageOff();
        cashingScr.itemImage.GetComponent<Button>().enabled = false;
        cashingScr.itemImage.color = new Color(255f / 255f, 255f / 255f, 255f / 255f, 50f / 255f);
    }

    public void SelectedOff()
    {
        b_isSelected = false;
        CheckImageOff();
        cashingScr.itemImage.GetComponent<Button>().enabled = true;
        cashingScr.itemImage.color = new Color(255f / 255f, 255f / 255f, 255f / 255f, 255f / 255f);
    }

    public void LoadInfo(int num, bool Item)
    {
        i_csvNum = num;
           b_isItem = Item;
        if (Item)
        {
            myItem = ItemList_Scr.instance.ItemLists[num];
            // 해당 아이템 번호의 이미지를 아이콘으로 설정
            cashingScr.itemImage.sprite = InventoryCaching_Scr.instance.itemIcons[num];

            if (myItem.HP > 0)
            {
                f_Value.Add(myItem.HP);
            }

            if (myItem.Heal > 0)
            {
                f_Value.Add(myItem.Heal);
            }

            if (myItem.Attack > 0)
            {
                f_Value.Add(myItem.Attack);
            }

            if (myItem.Speed > 0)
            {
                f_Value.Add(myItem.Speed);
            }

            if (myItem.Ability > 0)
            {
                f_Value.Add(myItem.Ability);
            }

            if (myItem.Critical > 0)
            {
                f_Value.Add(myItem.Critical);
            }
        }
        else
        {
            myItem = ItemList_Scr.instance.ItemLists[num];
            // 해당 아이템 번호의 이미지를 아이콘으로 설정
            cashingScr.itemImage.sprite = InventoryCaching_Scr.instance.Heroicons[num];

        }
    }

    public void ResetSlot()
    {
        b_isItem = false;
        b_isSelected = false;
        CheckImageOff();
        f_Value.Clear();
        cashingScr.itemImage.sprite = null;
        myItem = null;
    }
}